buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1'
    }
}

repositories {
    mavenCentral()
    maven {url "https://clojars.org/repo/"}
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('gradle/sonarqube.gradle')
apply from: rootProject.file('gradle/unit-tests.gradle')

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'

    defaultConfig {
        applicationId 'com.nilhcem.bblfr'
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 4
        versionName '1.1.0'

        resConfig 'fr'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        // Should be the default flavor.
        real {
            buildConfigField 'String', 'WS_ENDPOINT', '"http://www.brownbaglunch.fr/"'
            buildConfigField 'String', 'WS_LOCATIONS_URL', '"js/bbl-locations.js"'

            buildConfigField 'String', 'WS_DATA_ENDPOINT', '"http://data.brownbaglunch.fr/"'
            buildConfigField 'String', 'WS_BAGGERS_URL', '"baggers.js"'
            buildConfigField 'String', 'WS_BAGGERS_HR_URL', '"baggers-rh.js"'
        }

        // Mock server for instrumentation tests.
        mock {
            def endpoint = '"http://' + getLocalIp() + ':8990/"'
            buildConfigField 'String', 'WS_ENDPOINT', endpoint
            buildConfigField 'String', 'WS_LOCATIONS_URL', '"js/bbl-locations.js"'

            buildConfigField 'String', 'WS_DATA_ENDPOINT', endpoint
            buildConfigField 'String', 'WS_BAGGERS_URL', '"js/baggers.js"'
            buildConfigField 'String', 'WS_BAGGERS_HR_URL', '"rh/js/baggers.js"'
        }
    }

    lintOptions {
        abortOnError false
    }
}

ext.butterknifeVersion = '8.1.0'
ext.daggerVersion= '2.5'
ext.gmsVersion= '9.0.2'
ext.icepickVersion = '3.2.0'
ext.ollieVersion= '0.3.1'
ext.supportVersion = '24.0.0'

dependencies {
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"

    compile "com.google.android.gms:play-services-location:$gmsVersion"
    compile "com.google.android.gms:play-services-maps:$gmsVersion"

    compile "com.google.dagger:dagger:$daggerVersion"
    apt "com.google.dagger:dagger-compiler:$daggerVersion"

    compile "com.jakewharton:butterknife:$butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'

    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.0.2'

    compile 'com.jakewharton.timber:timber:4.1.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0'
    compile 'com.facebook.shimmer:shimmer:0.1.0@aar'

    compile "com.michaelpardo:ollie:$ollieVersion"
    apt "com.michaelpardo:ollie-compiler:$ollieVersion"

    compile "frankiesardo:icepick:$icepickVersion"
    apt "frankiesardo:icepick-processor:$icepickVersion"

    compile 'com.viewpagerindicator:library:2.4.1@aar'
}

def getLocalIp() {
    for (NetworkInterface iface : NetworkInterface.networkInterfaces) {
        for (InetAddress addr : iface.inetAddresses) {
            if (!addr.isLoopbackAddress()) {
                def ip = addr.hostAddress
                if (ip.startsWith('192.')) {
                    return ip
                }
            }
        }
    }
}
